%pip install ultralytics
import ultralytics
ultralytics.checks()

from google.colab import drive
drive.mount('/content/gdrive')

import os
from ultralytics import YOLO

# Load a model
model = YOLO("yolov8n.yaml")  # build a new model from YAML
model = YOLO("yolov8n.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolov8n.yaml").load("yolov8n.pt")  # build from YAML and transfer weights
# Train the model
results = model.train(data="/content/gdrive/MyDrive/yolo_train/data.yaml", epochs=50, imgsz=640)



# Load a model
model = YOLO("yolov8n.pt")  # load an official model
model = YOLO("/content/gdrive/MyDrive/yolo_train/demo_run_10_epoch_outputs/detect/train/weights/best.pt")  # load a custom model
# Validate the model
metrics = model.val()  # no arguments needed, dataset and settings remembered
metrics.box.map  # map50-95
metrics.box.map50  # map50
metrics.box.map75  # map75
metrics.box.maps  # a list contains map50-95 of each category
results = model.export(format='onnx')  # export the model to ONNX format

#To test data 
from ultralytics import YOLO
# Load a model
model = YOLO("path_of_best.pt")  # pretrained YOLOv8n model, best model path
# Run batched inference on a list of images
results = model(["test_image_path.jpg"], stream=True)  # return a generator of Results objects
# Process results generator
for result in results:
    boxes = result.boxes  # Boxes object for bounding box outputs
    masks = result.masks  # Masks object for segmentation masks outputs
    keypoints = result.keypoints  # Keypoints object for pose outputs
    probs = result.probs  # Probs object for classification outputs
    obb = result.obb  # Oriented boxes object for OBB outputs
    result.show()  # display to screen
    result.save(filename="result.jpg")  # save to disk










